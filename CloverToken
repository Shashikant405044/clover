package com.yourapp.ui.splash

import android.Manifest
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.lifecycleScope
import com.yourapp.BR
import com.yourapp.R
import com.yourapp.base.BaseActivity
import com.yourapp.databinding.ActivitySplashBinding
import com.yourapp.ui.location.LocationListActivity
import com.yourapp.ui.login.LoginActivity
import com.yourapp.utils.MConstant
import com.yourapp.viewmodel.MSplashActivityViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

class MSplashActivity : BaseActivity<ActivitySplashBinding, MSplashActivityViewModel>() {

    private lateinit var binding: ActivitySplashBinding
    private lateinit var mSplashActivityViewModel: MSplashActivityViewModel

    /**
     * Data binding variable for ViewModel
     */
    override fun getBindingVariable(): Int = BR.mSplashActivityViewModel

    /**
     * Hides the toolbar on splash screen
     */
    override fun getToolbarTitle(): CharSequence = ""

    override fun hasToolbar(): Boolean = false

    /**
     * Sets the layout for the splash screen
     */
    override fun getLayoutId(): Int = R.layout.activity_splash

    /**
     * Provides the ViewModel instance
     */
    override fun getViewModel(): MSplashActivityViewModel {
        mSplashActivityViewModel = ViewModelProvider(this)[MSplashActivityViewModel::class.java]
        return mSplashActivityViewModel
    }

    /**
     * Initializes the splash screen
     */
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = getViewDataBinding()
        mSplashActivityViewModel = getViewModel()
        binding.mSplashActivityViewModel = mSplashActivityViewModel
        requestStoragePermission()
    }

    /**
     * Checks and requests necessary permissions
     */
    private fun requestStoragePermission() {
        val permissions = arrayOf(
            Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.READ_EXTERNAL_STORAGE,
            Manifest.permission.GET_ACCOUNTS,
            Manifest.permission.READ_CONTACTS,
            Manifest.permission.WAKE_LOCK
        )

        val permissionsToRequest = permissions.filter {
            ContextCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED
        }

        if (permissionsToRequest.isNotEmpty()) {
            ActivityCompat.requestPermissions(
                this,
                permissionsToRequest.toTypedArray(),
                MConstant.READ_EXTERNAL_STORAGE_PERMISSION
            )
        } else {
            authenticateClover()
        }
    }

    /**
     * Authenticates with Clover and saves the token
     */
    private fun authenticateClover() {
        lifecycleScope.launch {
            val authResult = mSplashActivityViewModel.authenticateClover(this@MSplashActivity)

            // Save token and merchant ID
            mPreferenceHelper.saveValue(MConstant.AUTH_TOKEN, authResult?.authToken)
            mPreferenceHelper.saveValue(MConstant.CLOVER_MERCHANT_ID, authResult?.merchantId)

            // Move to next activity
            navigateToNextActivity()
        }
    }

    /**
     * Navigates to Login or Location screen based on saved data
     */
    private fun navigateToNextActivity() {
        lifecycleScope.launch {
            delay(MConstant.SPLASH_TIME_OUT.toLong())
            val locationData = mPreferenceHelper.getString(MConstant.LOCATION_NAME)
            val intent = if (locationData.isNullOrEmpty()) {
                Intent(this@MSplashActivity, LocationListActivity::class.java)
            } else {
                Intent(this@MSplashActivity, LoginActivity::class.java)
            }
            startActivity(intent)
            finish()
        }
    }

    /**
     * Handles permission results
     */
    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray,
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        when (requestCode) {
            MConstant.READ_EXTERNAL_STORAGE_PERMISSION -> {
                if (grantResults.isNotEmpty() && grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
                    Log.d("@shashikant", "Permissions granted.")
                    authenticateClover()
                } else {
                    Log.d("@shashikant", "Permissions denied.")
                    // Optionally show a message or exit
                }
            }
        }
    }
}




    suspend fun authenticateClover(context: Context): CloverAuth.AuthResult? {
        return withContext(Dispatchers.IO) {
            var account = CloverAccount.getAccount(context)
            if (account == null) {
                val cloverAccounts = AccountManager.get(context)
                    .getAccountsByType("com.clover.account")
                if (cloverAccounts.isNotEmpty()) {
                    account = cloverAccounts[0]
                }
            }

            if (account == null) {
                return@withContext null // Correctly returns null if no account
            }

            try {
                CloverAuth.authenticate(context) // No need for 'authResult' variable
            } catch (e: Exception) {
                e.printStackTrace()
                null // Correctly returns null in case of exception
            }
        }
    } 
